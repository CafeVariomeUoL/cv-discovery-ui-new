/**
 * Fast API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeMeta from '../model/AttributeMeta';
import AttributeValues from '../model/AttributeValues';
import DiscoverySettings from '../model/DiscoverySettings';
import HTTPValidationError from '../model/HTTPValidationError';
import Query from '../model/Query';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clearDbEavsClearDBPut operation.
     * @callback module:api/DefaultApi~clearDbEavsClearDBPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear Db
     * @param {module:api/DefaultApi~clearDbEavsClearDBPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    clearDbEavsClearDBPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/eavs/clearDB', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributes2DiscoveryGetAttributes2Get operation.
     * @callback module:api/DefaultApi~getAttributes2DiscoveryGetAttributes2GetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attributes2
     * @param {module:api/DefaultApi~getAttributes2DiscoveryGetAttributes2GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAttributes2DiscoveryGetAttributes2Get(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/getAttributes2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesDiscoveryGetAttributesGet operation.
     * @callback module:api/DefaultApi~getAttributesDiscoveryGetAttributesGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attributes
     * @param {module:api/DefaultApi~getAttributesDiscoveryGetAttributesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAttributesDiscoveryGetAttributesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/getAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesValsDiscoveryGetAttributeValuesPost operation.
     * @callback module:api/DefaultApi~getAttributesValsDiscoveryGetAttributeValuesPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attributes Vals
     * @param {module:model/AttributeValues} attributeValues 
     * @param {module:api/DefaultApi~getAttributesValsDiscoveryGetAttributeValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAttributesValsDiscoveryGetAttributeValuesPost(attributeValues, callback) {
      let postBody = attributeValues;
      // verify the required parameter 'attributeValues' is set
      if (attributeValues === undefined || attributeValues === null) {
        throw new Error("Missing the required parameter 'attributeValues' when calling getAttributesValsDiscoveryGetAttributeValuesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/getAttributeValues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSettingsDiscoveryGetSettingsGet operation.
     * @callback module:api/DefaultApi~getSettingsDiscoveryGetSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Settings
     * @param {module:api/DefaultApi~getSettingsDiscoveryGetSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSettingsDiscoveryGetSettingsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/getSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the processFileEavsProcessPut operation.
     * @callback module:api/DefaultApi~processFileEavsProcessPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process File
     * @param {String} fileName 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Array.<String>} opts.requestBody 
     * @param {module:api/DefaultApi~processFileEavsProcessPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    processFileEavsProcessPut(fileName, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling processFileEavsProcessPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'file_name': fileName,
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/eavs/process', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryQueryPost operation.
     * @callback module:api/DefaultApi~queryQueryPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query
     * @param {module:model/Query} query 
     * @param {module:api/DefaultApi~queryQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    queryQueryPost(query, callback) {
      let postBody = query;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryQueryPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDiscoverySettingsDiscoveryLoadSettingsGet operation.
     * @callback module:api/DefaultApi~saveDiscoverySettingsDiscoveryLoadSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Discovery Settings
     * @param {String} id 
     * @param {module:api/DefaultApi~saveDiscoverySettingsDiscoveryLoadSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    saveDiscoverySettingsDiscoveryLoadSettingsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveDiscoverySettingsDiscoveryLoadSettingsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/loadSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDiscoverySettingsDiscoverySaveSettingsPost operation.
     * @callback module:api/DefaultApi~saveDiscoverySettingsDiscoverySaveSettingsPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save Discovery Settings
     * @param {module:model/DiscoverySettings} discoverySettings 
     * @param {module:api/DefaultApi~saveDiscoverySettingsDiscoverySaveSettingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    saveDiscoverySettingsDiscoverySaveSettingsPost(discoverySettings, callback) {
      let postBody = discoverySettings;
      // verify the required parameter 'discoverySettings' is set
      if (discoverySettings === undefined || discoverySettings === null) {
        throw new Error("Missing the required parameter 'discoverySettings' when calling saveDiscoverySettingsDiscoverySaveSettingsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/saveSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setAttributeMetaDiscoverySetAttributeMetaPost operation.
     * @callback module:api/DefaultApi~setAttributeMetaDiscoverySetAttributeMetaPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Attribute Meta
     * @param {module:model/AttributeMeta} attributeMeta 
     * @param {module:api/DefaultApi~setAttributeMetaDiscoverySetAttributeMetaPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setAttributeMetaDiscoverySetAttributeMetaPost(attributeMeta, callback) {
      let postBody = attributeMeta;
      // verify the required parameter 'attributeMeta' is set
      if (attributeMeta === undefined || attributeMeta === null) {
        throw new Error("Missing the required parameter 'attributeMeta' when calling setAttributeMetaDiscoverySetAttributeMetaPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/discovery/setAttributeMeta', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadProcessFileEavsUploadPut operation.
     * @callback module:api/DefaultApi~uploadProcessFileEavsUploadPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Process File
     * @param {File} uploadFile 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Array.<String>} opts.emptyDelim 
     * @param {module:api/DefaultApi~uploadProcessFileEavsUploadPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadProcessFileEavsUploadPut(uploadFile, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadFile' is set
      if (uploadFile === undefined || uploadFile === null) {
        throw new Error("Missing the required parameter 'uploadFile' when calling uploadProcessFileEavsUploadPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
        'upload_file': uploadFile,
        'empty_delim': this.apiClient.buildCollectionParam(opts['emptyDelim'], 'csv')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/eavs/upload', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
